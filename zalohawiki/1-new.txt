Odkaz na projekt: https://github.com/martinm1/IV122/tree/master/cv1
# A) Hrátky s čísly
### A1:  Zadání: 
Které z přirozených čísel menších než 10000 má nejvíce dělitelů? Je odpověď na tuto otázku jednoznačná?
### A1: Výsledky:
Číslo s největším počtem dělitelů je 9240.\
Počet dělitelů tohoto čísla je 63.\
Číslo není jednoznačné.
### A1: Kód:
```java
    public static int getNumOfDivisors(int i){
        int numOfDivisorsOfI = 0;
        for(int j = 1; j < i; j++){
                if(i % j == 0) numOfDivisorsOfI++;
        }
        return numOfDivisorsOfI;
    }

    public static void one(){
        int number = 1;
        int maxNumOfDivisors = 0;
        boolean unambiguous = true;
        
        for(int i = 1; i < 10000; i++){
            int numOfDivisorsOfI = getNumOfDivisors(i);

            if (numOfDivisorsOfI >= maxNumOfDivisors){
                number = i;
                if (numOfDivisorsOfI == maxNumOfDivisors){
                    unambiguous = false;
                }
                if (numOfDivisorsOfI > maxNumOfDivisors){
                    unambiguous = true;
                }
                maxNumOfDivisors = numOfDivisorsOfI;
            }
        }
        
        System.out.println("1 : cislo s nejvetsim poctem delitelu: " + number);
        System.out.println("1 : pocet delitelu toho cisla: " + maxNumOfDivisors);
        System.out.println("1 : cislo je jednoznacne: " + unambiguous);
    }
```
### A2: Zadání: 
Některá  čísla  jdou  vyjádřit  jako  součet  tří  druhých  mocnin  přirozených  čísel,  například 964 = 6^2+ 12^2+ 28^2. Jiná takto vyjádřit nejdou, například číslo 7. Kolik přirozených čísel menších než 1000 takto vyjádřit nejde?
### A2: Výsledky:
Počet takových čísel je 200.
### A2: Kód:
```java
    public static boolean canBeDecomposed(int i){
        boolean canBeDecomposed = false;
        for(int j = 1; j < Math.sqrt(i); j++){
            for(int k = 1; k < Math.sqrt(i); k++){
                for(int l = 1; l < Math.sqrt(i); l++){
                    if (i == j*j + k*k + l*l)
                        canBeDecomposed = true;
                }
            }
        }
        return canBeDecomposed;
    }

    public static void two(){
        int numOfNumbersCannotBeDecomposed = 0;
        
        
        for(int i = 1; i < 1000; i++){
            if(!canBeDecomposed(i))
                numOfNumbersCannotBeDecomposed++;
        }
        System.out.println("2 : pocet cisel: " + numOfNumbersCannotBeDecomposed);
    }
```
### A3: Zadání: 
Collatzova posloupnost je definována následovně: „vezmi přirozené číslo, pokud je
sudé,  vyděl  jej  dvěma,  pokud  je  liché,  vynásob  jej  třemi  a  přičti  jedničku;  tento
postup opakuj, dokud nedostaneš číslo jedna. Například pro číslo 27 potřebujeme
111 kroků, než se dostaneme na číslo 1. Pro které číslo menší než 10000 potřebujeme
nejvíce kroků?
### A3: Výsledky:
Je to číslo 6171 a potřebujume 261 kroků.
### A3: Kód:
```java
    public static int getNumOfSteps(int i){
        int steps = 0;
        do{
            if(i % 2 == 0)
                i = (int) (i/2);
            else
                i = 3*i + 1;
            
            steps++;
        } while(i != 1);
        
        return steps;
    }
    
    public static void three(){
        int numOfSteps = 0;
        int number = 1;
        for(int i = 1; i < 10000; i++){
            if(numOfSteps < getNumOfSteps(i)){
                numOfSteps = getNumOfSteps(i);
                number = i;
            }
        }
        System.out.println("3 : cislo: " + number);
        System.out.println("3 : pocet kroku: " + numOfSteps);
```
### A4: Zadání:
Jaký je součet všech prvočísel, která jsou menší než 1000 a neobsahují žádnou trojku?
### A4: Výsledky:
Součet těchto čísel je 49061.
### A4: Kód:
```java
    public static boolean isPrime(int number){
        if(number == 0 || number == 1){
            return false;
        }
        
        boolean prime = true;
        
        for (int i = 2; i<=Math.sqrt(number); i++){
            if (number % i == 0){
                prime = false;
            }
        }
        
        return prime;
    }
    
    public static void four(){
        int sum = 0;
        
        for (int i = 0; i < 10; i++)
            for (int j = 0; j < 10; j++)
                for (int k = 0; k < 10; k++){
                    if(i != 3 && j != 3 && k!= 3){
                        int number = 100*i+10*j+k;
                        if (isPrime(number)){
                            sum+= number;
                        }
                    } 
                }
        System.out.println("4 : soucet: " + sum);
    }
```
### A5: Zadání:
Uvažme posloupnost, která začíná dvěmi jedničkami a každý další člen je součtem
dvou předchozích navýšený o jejich největšího společného dělitele. Posloupnost tedy
začíná: 1, 1, 3, 5, 9, 15, 27, 45, 81, 135, 243, 405. Jaká je hodnota prvního prvku
této posloupnosti, který je větší než milion?
### A5: Výsledky:
Hodnota prvku je 1594323.
### A5: Kód:
```java
    public static int euclid(int smaller, int larger){
        if(smaller > larger){
            int r = smaller;
            smaller = larger;
            larger = r;
        }
        while(smaller != 0){
            int r = larger % smaller;
            larger = smaller;
            smaller = r;
        }
        
        return larger;
    }
    
    public static void five(){
        int first = 1;
        int second = 1;
        
        do{
            int firstBefore = first;
            first = second;
            second = firstBefore + second + euclid(firstBefore, second);
        } while (second < 1000000);
        System.out.println("5 : cislo: " + second);
    }
```
# B) Práce s grafikou
### B: Část 1: Zadání: 
Vytvořte si vlastní knihovnu (případně najděte vhodnou existující) pro snadnou práci
s vektorovou i bitmapovou grafikou.
### B: Část 1: Poznámka: 
Kód třídy SVG použitý pro řešení tohoto zadání se nemusí přesně shodovat s kódem používaným pro řešení dalších zadání. Pro práci s rastrovou grafikou budu používat knihovnu ImageJ. 
### B: Část 1: Kód: 
```java
package com.mycompany.IV122;
import java.io.PrintWriter;
public class SVG {
    int width;
    int height;
    String name;
    String text = "";
    
    public SVG(int width, int height, String name){
        this.width = width;
        this.height = height;
        this.name = name;
        text = "<!DOCTYPE html>\n" + "<html>\n" + "<body>\n" +
          "\n<h1>"+ name +"</h1>\n\n" +
          "<svg width=\"" + width + "\" height=\"" + height + "\">";
    }
    
    public void line(int x1, int y1, int x2, int y2, int r, int g, int b){
        text+="\n  <line x1=\""+x1+"\" y1=\""+y1+
          "\" x2=\""+x2+"\" y2=\""+y2+
          "\" style=\"stroke:rgb("+r+","+g+","+b+");stroke-width:1\"/>";
    }; 
    
    public void save(){
        text+="\n</svg> \n" +"\n" + "</body>\n" + "</html>";
        
        try{
            PrintWriter pw = new PrintWriter(name+ ".svg");
            pw.print(text);
            pw.close();
        } catch (Exception e){
            System.out.println(e);
        }
    }
}
```
### B: Část 2: Zadání:
Práci s bitmapovou grafikou otestujte vytvořením následujícího obrázku: ...
### B: Část 2: Obrázek:
https://github.com/martinm1/IV122/blob/master/cv1/bitmap.png \
![](https://github.com/martinm1/IV122/blob/master/cv1/bitmap.png)
### B: Část 2: Kód: 
```java
    public static void bitmap(){
        int w = 500;
        int h = 500;
        
        ColorProcessor ip = new ColorProcessor(w, h);
        
        
        int[] pixelRGB = new int[3];
        
        pixelRGB[0] = 0;
        pixelRGB[1] = 0;
        pixelRGB[2] = 0;
        
        for (int x = 0; x < w; x++)
        {
            for (int y = 0; y < h; y++)
            {
                pixelRGB[0] = x*(256-1)/w;
                pixelRGB[2] = y*(256-1)/h;
                ip.putPixel(x, y, pixelRGB);
            }
        }
        ImagePlus img = new ImagePlus("image", ip);
        //img.show();
        FileSaver fs = new FileSaver(img);
        fs.saveAsPng("bitmap.png");
    }
```
### B: Část 3: Zadání:
Práci s vektorovou grafikou otestujte vytvořením hvězdy a několika jejích variací (ne nutně
přesně těch uvedených). Vyvarujte se copy&paste kódu.
### B: Část 3: Obrázky:
https://github.com/martinm1/IV122/blob/master/cv1/star4.svg \
https://github.com/martinm1/IV122/blob/master/cv1/weirdThing.svg \
![star4](https://github.com/martinm1/IV122/blob/master/cv1/star4.png)
![weirdThing](https://github.com/martinm1/IV122/blob/master/cv1/weirdThing.png)
### B: Část 3: Kód:
```java
    public static void star4(){
        int size = 500;
        
        SVG svg = new SVG(size, size, "star4");
        for(int i = 0; i <= size/2; i = i+25){
            svg.line(size/2, size/2+i, size-i, size/2, 0, 0, 0);
            svg.line(size/2, size/2-i, size-i, size/2, 0, 0, 0);
            
            svg.line(size/2, size/2+i, i, size/2, 0, 0, 0);
            svg.line(size/2, size/2-i, i, size/2, 0, 0, 0);
        }
        svg.save();
    }
    
    public static void weirdThing(){
        int size = 500;
        
        SVG svg = new SVG(size, size, "weirdThing");
        for(int i = 0; i <= size; i = i+25){
            svg.line(size, i, size-i, size, 0, 0, 0);
            svg.line(size, i, i, 0, 0, 0, 0);
            
            svg.line(0, i, size-i, 0, 0, 0, 0);
            svg.line(0, i, i, size, 0, 0, 0);
        }
        svg.save();
    }
```
# C) Ulamova spirála
### C: Zadání: 
Vytvořte program, který generuje Ulamovu spirálu. Vyzkoušejte, jak to dopadne, když
místo prvočísel budeme do spirály zakreslovat čísla dělitelná k (vyzkoušejte např. 4, 5, 8). Soustřeďte se na elegantní zápis programu (vyvarujte se copy&paste kódu).
### C: Obrázek:
https://github.com/martinm1/IV122/blob/master/cv1/ulamSpiral.png \
![](https://github.com/martinm1/IV122/blob/master/cv1/ulamSpiral.png)
### C: Kód:
```java
    public static void ulamSpiral(){
        int w = 200;
        int h = 200;
        
        int maximum = w*h;
        
        ColorProcessor ip = new ColorProcessor(w, h);
        
        
        
        int[] pixelRGB = new int[3];
        int[] pixelRGB2 = new int[3];
        
        pixelRGB[0] = 255;
        pixelRGB[1] = 255;
        pixelRGB[2] = 255;
        
        pixelRGB2[0] = 0;
        pixelRGB2[1] = 0;
        pixelRGB2[2] = 0;
        
        int x = 0;
        int y = 0;
        int zerox = 0;
        int zeroy = 0;
        
        do{
            for(; x < w; x++){
                if(isPrime(maximum)){
                    ip.putPixel(x, y, pixelRGB2);
                }
                else{
                    ip.putPixel(x, y, pixelRGB);
                }
                maximum--;
            }
            x--;//fix x overflow
            zeroy++;//first row is finished
            y++;//go to the next row
            
            for(;y < h; y++){
                if(isPrime(maximum)){
                    ip.putPixel(x, y, pixelRGB2);
                }
                else{
                    ip.putPixel(x, y, pixelRGB);
                }
                maximum--;
            }
            y--;//fix y overflow   
            w--;//last column is finised
            x--;//go to previous column
            
            for(; x >= zerox; x--){
                if(isPrime(maximum)){
                    ip.putPixel(x, y, pixelRGB2);
                }
                else{
                    ip.putPixel(x, y, pixelRGB);
                }
                maximum--;
            }
            x++;//fix x overflow
            h--;//last row is finised
            y--;//go to previous row
            
            for(; y >= zeroy; y--){
                if(isPrime(maximum)){
                    ip.putPixel(x, y, pixelRGB2);
                }
                else{
                    ip.putPixel(x, y, pixelRGB);
                }
                maximum--;
            }
            y++;//fix y overflow
            zerox++;//first column in finished
            x++;//go to next column
        }while(maximum > 0);
        
        ImagePlus img = new ImagePlus("image", ip);
        
        FileSaver fs = new FileSaver(img);
        fs.saveAsPng("ulamSpiral.png");
    }
```
# D) Vizualizace NSD
### D: Zadání: 
1.  Napište program generující obrázek vizualizující největší společné dělitele.
2.  Napište program generující obrázek vizualizující délku běhu Euklidova algoritmu:
•počet kroků algoritmu – odčítací varianta,
•počet kroků algoritmu – efektivní modulo varianta,
•různé  způsoby  barevného  znázornění  (např.  kombinace  obou  předchozích  do jednoho obrázku).
### D: Obrázky: Odčítací varianta:
https://github.com/martinm1/IV122/blob/master/cv1/euclidSubtraction.png \
![euclidSubtraction](https://github.com/martinm1/IV122/blob/master/cv1/euclidSubtraction.png)
### D: Obrázky: Efektivní modulo varianta:
https://github.com/martinm1/IV122/blob/master/cv1/euclidModulo.png \
![euclidModulo](https://github.com/martinm1/IV122/blob/master/cv1/euclidModulo.png)
### D: Obrázky: Kombinace:
https://github.com/martinm1/IV122/blob/master/cv1/euclidCombined.png \
![euclidCombined](https://github.com/martinm1/IV122/blob/master/cv1/euclidCombined.png)
### D: Kód:
```java
    public static int euclidNumOfStepsSubtraction(int smaller, int larger){
        if(smaller > larger){
            int r = smaller;
            smaller = larger;
            larger = r;
        }
        
        if (smaller == 0) return 0;
        else return euclidNumOfStepsSubtraction(smaller, larger-smaller) + 1;
    }
    
    public static int euclidNumOfStepsModulo(int smaller, int larger){
        if(smaller > larger){
            int r = smaller;
            smaller = larger;
            larger = r;
        }
        
        if (smaller == 0) return 0;
        else return euclidNumOfStepsSubtraction(larger % smaller, smaller) + 1;
    }
    
    public static void euclidAll(int type){ //0=subtraction, 1=modulo, 2=combined
        int w = 500;
        int h = 500;
        
        ColorProcessor ip = new ColorProcessor(w, h);
        
        
        int[] pixelRGB = new int[3];
        
        pixelRGB[0] = 0;
        pixelRGB[1] = 0;
        pixelRGB[2] = 0;
        
        for (int x = 0; x < w; x++)
        {
            for (int y = 0; y < h; y++)
            {
                if(type==0){
                    if(euclidNumOfStepsSubtraction(x,y) < 256){
                        pixelRGB[0] = euclidNumOfStepsSubtraction(x,y);
                    }
                    else{
                        pixelRGB[0] = 0;
                    }
                    ip.putPixel(x, y, pixelRGB);
                }
                else if (type==1){
                    if(euclidNumOfStepsModulo(x,y) < 256){
                        pixelRGB[0] = euclidNumOfStepsModulo(x,y);
                    }
                    else{
                        pixelRGB[0] = 0;
                    }
                    ip.putPixel(x, y, pixelRGB);
                
                }
                else if (type==2){
                    if(euclidNumOfStepsSubtraction(x,y) < 256){
                        pixelRGB[0] = euclidNumOfStepsSubtraction(x,y);
                    }
                    else{
                        pixelRGB[0] = 0;
                    }
                    if(euclidNumOfStepsModulo(x,y) < 256){
                        pixelRGB[1] = euclidNumOfStepsModulo(x,y);
                    }
                    else{
                        pixelRGB[1] = 0;
                    }
                    ip.putPixel(x, y, pixelRGB);
                }
            }
        }
        ImagePlus img = new ImagePlus("image", ip);
        //img.show();
        
        FileSaver fs = new FileSaver(img);
        if(type==0){
            fs.saveAsPng("euclidSubtraction.png");
        }
        else if (type==1){
            fs.saveAsPng("euclidModulo.png");
        }
        else if (type==2){
            fs.saveAsPng("euclidCombined.png");
        }
    }
    
    public static void euclidSubtraction(){
        euclidAll(0);
    }
    
    public static void euclidModulo(){
        euclidAll(1);
    }
    
    public static void euclidCombined(){
        euclidAll(2);
    }
```
# Volání funkcí programu (Metoda main):
```java
    public static void main(String [] args)
    {
        one();
        two();
        three();
        four();
        five();
        bitmap();
        star4();
        weirdThing();
        ulamSpiral();
        euclidSubtraction();
        euclidModulo();
        euclidCombined();
    }
```
